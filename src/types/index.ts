export interface MercadopagoOptions {
    /**
     * Private key for your Mercado Pago application, for use in the backend to generate Payments
    */
    accessToken: string;
    /**
     * Webhook secret included in webhook notifications from Mercado Pago, useful to verify 
     * their authenticity
    */
    webhookSecret: string;
}

/**
 * Options for the Redsys Payment Provider.
 * These correspond to the configuration required by `redsys-easy` and general Redsys setup.
 */
export interface RedsysOptions {
  /**
   * Merchant Code (CÃ³digo FUC) provided by Redsys.
   * Example: "123456789"
   */
  merchantCode: string;

  /**
   * Terminal number assigned by Redsys.
   * Example: "1"
   */
  terminal: string;

  /**
   * Secret encryption key provided by Redsys for signing and validating messages.
   * Example: "abcdefghijklmnopqrstuvwxyz0123456789"
   */
  secretKey: string;

  /**
   * Environment for Redsys transactions.
   * 'test' for development/testing environment.
   * 'live' for production environment.
   */
  environment: 'test' | 'live';

  /**
   * Optional: Default merchant name to be displayed on Redsys payment page.
   * Can be overridden by transaction-specific data if needed.
   * Example: "My Awesome Store"
   */
  merchantName?: string;

  /**
   * Optional: Default transaction type (Ds_Merchant_TransactionType).
   * `redsys-easy` might set a default (e.g., "0" for Authorization).
   * Can be specified if a different default is needed across all transactions.
   * Example: "0" (Authorization), "1" (Pre-authorization), etc.
   */
  transactionType?: string;

  /**
   * Optional: Default currency code (ISO 4217) for transactions (e.g., "EUR", "USD").
   * `redsys-easy` uses "EUR" (978) by default if not specified during parameter creation.
   * This can be overridden per transaction.
   * Example: "EUR"
   */
  currency?: string; // Example: "EUR", "USD" (numeric codes like 978 for EUR also common)

  /**
   * Optional: URL for Redsys to redirect the user to after payment completion (Ds_Merchant_UrlOK or Ds_Merchant_UrlKO).
   * This is often dynamically generated by Medusa or configured in the Redsys admin panel.
   * If provided here, it might serve as a fallback or for specific use cases.
   * Example: "https://mystore.com/checkout/redsys/response"
   */
  urlResponse?: string;

  /**
   * Optional: URL for Redsys to send asynchronous notifications (Ds_Merchant_MerchantURL).
   * This should point to the Medusa notification endpoint (e.g., "/store/redsys/notification").
   * This is crucial for receiving updates from Redsys.
   * Example: "https://api.mystore.com/store/redsys/notification"
   */
  urlNotification?: string;

  /**
   * Optional: An additional webhook secret for verifying incoming notifications.
   * Note: `redsys-easy` primarily uses `secretKey` for SHA256 signature validation of notifications.
   * This field could be used for an extra layer of custom verification if implemented.
   */
  webhookSecret?: string;
}

// It might be beneficial to create a union type for better type safety across different payment providers
// export type PaymentProviderOptions = MercadopagoOptions | RedsysOptions;
// However, for now, just exporting RedsysOptions as per current file structure.

export type MercadopagoWebhookPayload = {
    action: string;
    data: {
        id: string;
    }
}

export type MercadopagoError = {
    error: string
    message: string
    status: string
    cause: {
        code: string
        description: string
    }[] | undefined
}